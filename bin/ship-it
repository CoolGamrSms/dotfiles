#!/bin/bash

git_conflicts() {
    git ls-files -u | cut -f 2 | sort -u
}

ls $(git rev-parse --git-dir) | grep rebase
if [ $? -ne 0 ]; then
 git rebase origin/master \
     --exec "rm ~/tests-failed || exit 0" \
     --exec "./bin/taskrunner mobile/troy/gen/component-tests" \
     --exec "./bin/taskrunner mobile/troy/gen || (touch ~/tests-failed && exit 1)" \
     --exec "git add -A && git commit -a --amend --no-edit"
else
    git add -A
    git commit --amend --no-edit
    echo "Picking up where we left off..." | grep yeet
fi
while [ $? -ne 0 ]
do
    cat ~/tests-failed
    if [ $? -eq 0 ]; then
        echo "Tests failed for the current commit; Please fix them manually."
        rm ~/tests-failed
        exit 1
    fi
    git_conflicts | grep -v ".*\.shot$" | grep -v ".*\.snap$" | grep -v ".*\.dot$"
    if [ $? -eq 0 ]; then
        echo "These look like real conflicts. You're on your own now."
        exit 1
    fi
    git add -A
    git commit --amend --no-edit
    git rebase --continue
done

