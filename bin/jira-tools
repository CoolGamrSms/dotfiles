#!/bin/bash

jira_link_base="https://samsaradev.atlassian.net/browse/"
new_ticket_text="-> Create new ticket"
jira_branch_map=~/.cache/jira-branch-associations

touch "$jira_branch_map"

# Helpers for colored text
colored_text() {
    color=$1
    shift
    echo -e "\e[${color}m\c"
    echo "$@"
    echo -e "\e[0m\c"
};

red() { colored_text 31 $@; }
green() { colored_text 32 $@; }
yellow() { colored_text 33 $@; }

find_reviewers() {
    # Find reviewers
    review_teams="
    samsara-dev/mobile
    "
    echo $review_teams
    rg -I "GithubUsername:\s+\".*\"" "go/src/samsaradev.io/team" \
            | sed 's/^[ \t]*GithubUsername:[ \t]*"\(.*\)".*$/\1/' \
            | sort
};

pull_request() {
    pushd $(git rev-parse --show-toplevel)

    branch_name=$(git rev-parse --abbrev-ref HEAD)
    echo $branch_name

    green "Looking for JIRA ticket association..."

    ticket=$(grep "$branch_name" "$jira_branch_map" | cut -d ' ' -f1)

    template=$(cat .github/PULL_REQUEST_TEMPLATE.md \
        | sed -e "s@\(\*\*JIRA ticket\*\*: \)link@\1${jira_link_base}${ticket}@")

    title=""
    if [ -z "$ticket" ]; then
        red "No ticket found."
        template=$(cat .github/PULL_REQUEST_TEMPLATE.md)
    else
        title=$(jira "$ticket" | grep "^summary:" | sed 's/^summary: //')
    fi


    reviewers=$(find_reviewers \
        | fzf -m \
        | paste -s -d ',')

    hub pull-request \
        --push \
        --message "$title" \
        --message "$template" \
        --reviewer "$reviewers" \
        --edit

    if [[ $? -ne 0 ]]; then
        exit 1
    fi

    green "Transitioning '$ticket' into 'In Review'..."
    jira transition "In Review" "$ticket" --noedit
    popd
};

start_work() {
    git diff-index --cached --quiet HEAD
    has_local_changes=$?

    if [ $has_local_changes -ne 0 ]; then
        red "Uncommitted changes detected. Please commit or stash them first."
        exit 1
    fi

    git checkout master

    ticket_text=$( (jira unstarted; green $new_ticket_text) | fzf \
        --ansi \
        --reverse \
        --prompt="Search for a JIRA ticket: " \
        --height="40%" \
        --preview="echo {} | cut -d ':' -f1 | xargs jira")

    if [ -z "$ticket_text" ]; then
        exit 0
    fi

    if [ "$ticket_text" = "$new_ticket_text" ]; then
        # TODO: implement
        yellow "coming soon!"
        exit 0
        ticket="MOB-NEW"
    else
       # Split the ticket from the FZF string
       ticket=$(echo "$ticket_text" \
           | grep --color=never -oE "^[-A-Z0-9]*:" \
           | tr -d ':')
    fi

    # lol
    dont_exit=0

    association=$(grep $ticket $jira_branch_map)
    if [ ! -z "$association" ]; then
        branch_name=$(echo $association | cut -d ' ' -f2)
        green "Ticket already associated with branch '$branch_name'. Checking out..."
        git checkout "$branch_name"
        if [ $? -ne 0 ]; then
            yellow "Couldn't find branch locally. Attempting to fetch..."
            git fetch origin
            git checkout "$branch_name"
            if [ $? -ne 0 ]; then
                red "Couldn't find branch remotely. Want to delete the association? (y/n) "
                read -n 1 c
                echo ""
                if [[ $c == [yY] ]]; then
                    temp_file=`mktemp`
                    mv "$jira_branch_map" "$temp_file"
                    grep -v "$ticket" "$temp_file" > "$jira_branch_map"
                    dont_exit=1
                else
                    exit 0
                fi
            fi
        fi
        if [ $dont_exit -eq 0 ]; then
            exit 0
        fi
    fi

    green "$ticket_text"

    good_branch_name=1
    while [ $good_branch_name -ne 0 ]; do
        green "Enter a name for your branch: "
        read branch_name

        case "$branch_name" in
             *\ * )
                   red "Your branch cannot contain spaces."
                   continue
                  ;;
        esac

        echo "$ticket" "$branch_name" >> "$jira_branch_map"
        git checkout -b "$branch_name"
        good_branch_name=$?
    done

    printf "Rebasing on latest master... "
    git pull origin master --rebase &> /dev/null
    if [ $? -ne 0 ]; then
        red "Failed to pull latest master."
        exit 1
    fi
    echo "Done."

    green "Transitioning '$ticket' into 'In Progress'..."
    jira transition "In Progress" "$ticket" --noedit
};


# Runner Program
if [ "$1" = "pull-request" ]; then
    pull_request
fi

if [ "$1" = "start" ]; then
    start_work
fi
